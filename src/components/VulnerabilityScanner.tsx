import { useState } from "react";
import { ScannerHeader } from "./scanner/ScannerHeader";
import { ScanConfigPanel } from "./scanner/ScanConfigPanel";
import { ScanResults } from "./scanner/ScanResults";
import { ScanHistory } from "./scanner/ScanHistory";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

export interface ScanConfig {
  target: string;
  scanType: string;
  portRange: string;
  serviceDetection: boolean;
  osDetection: boolean;
  scriptScan: boolean;
  timing: string;
}

export interface ScanResult {
  id: string;
  target: string;
  timestamp: Date;
  status: "running" | "completed" | "failed";
  ports: Array<{
    port: number;
    protocol: string;
    state: string;
    service: string;
    version?: string;
    vulnerabilities?: Array<{
      cve: string;
      severity: "low" | "medium" | "high" | "critical";
      description: string;
    }>;
  }>;
  hostInfo?: {
    os: string;
    hostname: string;
    macAddress: string;
  };
}

export function VulnerabilityScanner() {
  const [scanHistory, setScanHistory] = useState<ScanResult[]>([]);
  const [currentScan, setCurrentScan] = useState<ScanResult | null>(null);
  const [isScanning, setIsScanning] = useState(false);

  const handleStartScan = (config: ScanConfig) => {
    const newScan: ScanResult = {
      id: Date.now().toString(),
      target: config.target,
      timestamp: new Date(),
      status: "running",
      ports: [],
    };

    setCurrentScan(newScan);
    setIsScanning(true);

    // Simulate scan progress
    setTimeout(() => {
      const completedScan: ScanResult = {
        ...newScan,
        status: "completed",
        ports: [
          {
            port: 22,
            protocol: "tcp",
            state: "open",
            service: "ssh",
            version: "OpenSSH 7.4",
            vulnerabilities: [
              {
                cve: "CVE-2020-15778",
                severity: "medium",
                description: "Privilege escalation vulnerability",
              },
            ],
          },
          {
            port: 80,
            protocol: "tcp",
            state: "open",
            service: "http",
            version: "Apache 2.4.29",
          },
          {
            port: 443,
            protocol: "tcp",
            state: "open",
            service: "https",
            version: "Apache 2.4.29",
            vulnerabilities: [
              {
                cve: "CVE-2021-34798",
                severity: "high",
                description: "Null pointer dereference vulnerability",
              },
            ],
          },
        ],
        hostInfo: {
          os: "Linux Ubuntu 18.04",
          hostname: "target-server",
          macAddress: "00:0c:29:xx:xx:xx",
        },
      };

      setCurrentScan(completedScan);
      setScanHistory(prev => [completedScan, ...prev]);
      setIsScanning(false);
    }, 3000);
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <ScannerHeader />
      
      <Tabs defaultValue="scanner" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="scanner">Scanner</TabsTrigger>
          <TabsTrigger value="results">Results</TabsTrigger>
          <TabsTrigger value="history">History</TabsTrigger>
        </TabsList>
        
        <TabsContent value="scanner" className="space-y-6">
          <ScanConfigPanel onStartScan={handleStartScan} isScanning={isScanning} />
        </TabsContent>
        
        <TabsContent value="results">
          <ScanResults scan={currentScan} isScanning={isScanning} />
        </TabsContent>
        
        <TabsContent value="history">
          <ScanHistory scans={scanHistory} onSelectScan={setCurrentScan} />
        </TabsContent>
      </Tabs>
    </div>
  );
}